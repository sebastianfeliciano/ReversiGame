

Reflecting on my design and implementation choices, there are certainly aspects I wish I had
approached differently. Initially, I relied heavily on concrete classes, which, in hindsight,
wasn't the most flexible choice for my customers. This rigidity made it challenging for them
to modify and adapt my code to their specific needs. It's a vital lesson in the importance
of flexibility in software design, especially when creating something that others will build
upon. Additionally, I realized that my explanation of the moveHandler's purpose was not
as clear as it could have been. A more straightforward and detailed explanation would
have made it easier for users to understand its functionality and integrate it
effectively into their workflows.

From this experience, I learned a crucial lesson about balancing uniqueness with adaptability in
coding. It's essential to craft code that stands out for its innovative approach,
yet remains open and adaptable for others to modify and extend. My interactions with the providers
were overwhelmingly positive. They were responsive and supportive, promptly addressing my queries,
clarifying doubts, and even helping rectify errors. Their quick and helpful responses were
invaluable, especially when dealing with unforeseen issues or needing clarification on specific
points.

However, there was a limitation regarding the resizing aspect and strategy components,
as the image sizes were fixed and tracking in the game was non-existent in mine.
This restriction posed challenges, particularly when trying to adapt the background to
different dimensions, and adapting certain strategies (the extra-credit ones). It's a
reminder that considering scalability and adaptability in all aspects
of a project, including visual elements, is crucial for creating versatile and user-friendly
application.